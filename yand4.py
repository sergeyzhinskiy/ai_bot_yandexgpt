# -*- coding: utf-8 -*-
import asyncio
import configparser
import json
import logging
import os
import re
import requests
import sys
import datetime
import random
import sys
import time
import platform
import ctypes
import tempfile
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChannel
from telethon.errors import ChannelPrivateError, ChatIdInvalidError
from telethon.tl.types import PeerUser, PeerChannel, PeerChat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    #level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("telegram_bot.log", encoding='utf-8')
    ]
)
logger = logging.getLogger("TelegramBot")


MAX_RUNS = 4
RUN_COUNTER_FILE = os.path.join(tempfile.gettempdir(), "telegram_bot_run_counter")  
LOCK_FILE = os.path.join(tempfile.gettempdir(), "telegram_bot_lock")     

FILE_ATTRIBUTE_HIDDEN = 0x02
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = configparser.ConfigParser()
    if not config.read("config.ini"):
        raise FileNotFoundError("–§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    api_id = config['Telegram']['api_id']
    api_hash = config['Telegram']['api_hash']
    username = config['Telegram']['username']
    yandex_api_key = config['Yandex']['yandexgpt_api']
    #ALLOWED_CHANNELS = [12345678, 87654321]  # ID —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    logger.info(f"API ID: {api_id}, Username: {username}")
    #logger.debug(f"API ID: {api_id}, Username: {username}")
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–∞
MAX_HISTORY_LENGTH = 15
MAX_TOKENS = 4000
MAX_HISTORY_MESSAGES = 100


# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
SYSTEM_PROMPT = """
–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π:
1. –°–º–∞–π–ª–∏–∫–∏ üòä –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —ç–º–æ—Ü–∏–∏
2. Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:
   - **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π
   - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
3. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ
4. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
- "–ü—Ä–∏–≤–µ—Ç! üëã –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
- "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! ‚úÖ **–ù–æ–º–µ—Ä:** #12345"
- "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üòç –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–Ω–¥–µ:"
- "–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è: –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1-2 –¥–Ω—è"
- "–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É: ü§î\n1. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n2. –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
- "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
"""

# ===================================================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
# ===================================================================
client = TelegramClient(username, int(api_id), api_hash)
user_styles = {}  # {user_id: 'formal'/'informal'}

# ===================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å—Ç–∏–ª–µ–º
# ===================================================================
def get_history_path(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return os.path.join("chat_history", f"user_{user_id}.json")

def load_user_history(user_id: int) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    path = get_history_path(user_id)
    try:
        if os.path.exists(path):
            with open(path, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}: {str(e)}")
    return []

def save_user_history(user_id: int, history: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–∞–π–ª."""
    path = get_history_path(user_id)
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}: {str(e)}")

async def load_telegram_history(user_id: int):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ Telegram.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user"/"assistant", "text": "—Å–æ–æ–±—â–µ–Ω–∏–µ"}]
    """
    try:
        me = await client.get_me()
        history = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        entity = await client.get_entity(PeerUser(user_id))
        
        logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        async for message in client.iter_messages(entity, limit=MAX_HISTORY_MESSAGES):
            if not message.text:
                continue
                
            if message.sender_id == user_id:
                role = "user"
            elif message.sender_id == me.id:
                role = "assistant"
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö
                
            history.append({
                "role": role,
                "text": message.text,
                "time": message.date.isoformat() if message.date else datetime.datetime.now().isoformat()
            })
        
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏
        history.reverse()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ Telegram –¥–ª—è user_id {user_id}")
        return history
        
    except (ChannelPrivateError, ChatIdInvalidError):
        logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è user_id {user_id}: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ Telegram –¥–ª—è user_id {user_id}: {str(e)}")
        return []

def set_hidden_attribute(filepath):

    if platform.system() == "Windows":
        try:
            
            filepath = os.path.abspath(filepath)
            
            ctypes.windll.kernel32.SetFileAttributesW(filepath, FILE_ATTRIBUTE_HIDDEN)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞  {filepath}: {str(e)}")

def check_and_update_run_counter():
    
    
    if os.path.exists(LOCK_FILE):
        msg = (
            "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏. "
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {hash(os.environ.get('USERNAME', 'unknown')) & 0xFFFF}"
        )
        print("\n" + "="*60)
        print(msg)
        print("="*60 + "\n")
        logger.critical(msg)
        sys.exit(42)  
    
    
    run_count = 0
    if os.path.exists(RUN_COUNTER_FILE):
        try:
            
            with open(RUN_COUNTER_FILE, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if content.isdigit():
                    run_count = int(content)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è : {str(e)}")
            run_count = 0
    
    
    if run_count >= MAX_RUNS:
        #
        try:
            with open(LOCK_FILE, 'w', encoding='utf-8') as f:
                f.write(str(int(time.time())))
            
            set_hidden_attribute(LOCK_FILE)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}")
        
        msg = (
            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—É—Å–∫–æ–≤! "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏. "
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {hash(os.environ.get('USERNAME', 'unknown')) & 0xFFFF}"
        )
        print("\n" + "="*60)
        print(msg)
        print("="*60 + "\n")
        logger.critical(msg)
        sys.exit(42)  
    
    
    run_count += 1
    try:
        
        temp_path = RUN_COUNTER_FILE + ".tmp"
        with open(temp_path, 'w', encoding='utf-8') as f:
            f.write(str(run_count))
        
        
        if os.path.exists(RUN_COUNTER_FILE):
            os.remove(RUN_COUNTER_FILE)
        os.rename(temp_path, RUN_COUNTER_FILE)
        
        
        set_hidden_attribute(RUN_COUNTER_FILE)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω : {run_count}/{MAX_RUNS}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è : {str(e)}")
        

def analyze_communication_style(messages: list) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not messages:
        return 'neutral'
    
    user_messages = [msg['text'] for msg in messages if msg['role'] == 'user']
    combined_text = " ".join(user_messages).lower()
    
    formal_terms = ['–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—é']
    informal_terms = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Å–ø—Å', '–ø–ª–∏–∑', '–æ–∫–µ–π']
    
    formal_score = sum(1 for term in formal_terms if term in combined_text)
    informal_score = sum(1 for term in informal_terms if term in combined_text)
    
    if formal_score > informal_score:
        return 'formal'
    elif informal_score > formal_score:
        return 'informal'
    return 'neutral'

# ===================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ===================================================================
@client.on(events.NewMessage(incoming=True))
async def message_handler(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    try:
        msg = event.message
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        chat_type = None
        if isinstance(msg.peer_id, PeerUser):
            chat_type = "private"
        elif isinstance(msg.peer_id, PeerChannel):
            chat_type = "channel"
        elif isinstance(msg.peer_id, PeerChat):
            chat_type = "group"
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        if chat_type != "private":
            logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_type} (ID: {msg.peer_id.channel_id})")
            return
        """–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö\—á–∞—Ç–∞—Ö
        if chat_type == "group":
                # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç
                if f"@{username}" not in msg.text:
                    return
        –î–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –Ω–∞–¥–æ —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö(–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if chat_type == "channel" and msg.peer_id.channel_id not in ALLOWED_CHANNELS:
            return"""
    
        msg = event.message
        if not msg.text or msg.text.startswith('/'):
            return
            
        user_id = msg.sender_id
        message_text = msg.text
        chat_id = event.chat_id #ID —á–∞—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        
        logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç [user_id: {user_id}]: {message_text[:100]}...")
        async with client.action(chat_id, 'typing'):
            #–∑–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = asyncio.get_event_loop().time()
        
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            history = load_user_history(user_id)
        
            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Telegram
            if not history:
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è user_id {user_id} –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Telegram...")
                telegram_history = await load_telegram_history(user_id)
                history.extend(telegram_history)
                if history:
                    save_user_history(user_id, history)
        
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
            comm_style = analyze_communication_style(history)
            logger.info(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è user_id {user_id}: {comm_style}")
            #logger.debug(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è user_id {user_id}: {comm_style}")
        
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({
                "role": "user",
                "text": message_text,
                "time": datetime.datetime.now().isoformat()
            })
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è YandexGPT
            context_messages = [
                {
                    "role": "system",
                    "text": SYSTEM_PROMPT
                }
            ] + history[-MAX_HISTORY_LENGTH:]
        
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT
            prompt = {
                "modelUri": "gpt://<–≤–∞—à folder id>/yandexgpt/latest",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.4,
                    "maxTokens": MAX_TOKENS
                },
                "messages": context_messages
            }
        
            headers = {
                'Authorization': f'Api-Key {yandex_api_key}',
                'Content-Type': 'application/json'
            }
        
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT –¥–ª—è user_id {user_id}")
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                loop = asyncio.get_event_loop()
                def make_request():
                    return requests.post(
                        "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
                        headers=headers,
                        json=prompt,
                        timeout=30
                    )
                response = await loop.run_in_executor(None, make_request)
                response.raise_for_status()
            
                result = response.json()
                gpt_text = result['result']['alternatives'][0]['message']['text']
            
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª—è user_id {user_id}: {gpt_text[:100]}...")
            
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                history.append({
                    "role": "assistant",
                    "text": gpt_text,
                    "time": datetime.datetime.now().isoformat()
                })
                save_user_history(user_id, history)
            
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                elapsed = asyncio.get_event_loop().time() - start_time
                min_delay = 5.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
                max_delay = 60.0 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥

                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if elapsed < min_delay:
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥
                    additional_delay = min(max_delay - elapsed, random.uniform(0, 55))
                    total_delay = min_delay - elapsed + additional_delay

                    logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É: {total_delay:.2f} —Å–µ–∫")
                    await asyncio.sleep(total_delay)
                elif elapsed < max_delay:
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –æ—Å—Ç–∞–≤—à–µ–º—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    additional_delay = random.uniform(0, max_delay - elapsed)
                    logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É: {additional_delay:.2f} —Å–µ–∫")
                    await asyncio.sleep(additional_delay)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await event.reply(gpt_text, parse_mode='md')
                await msg.mark_read()
            
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {str(e)}")
                await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {str(e)}")
                await event.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        try:
            await event.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

# ===================================================================
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
# ===================================================================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await client.start()
        me = await client.get_me()
        logger.info(f"–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{me.username} (ID: {me.id})")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
    finally:
        try:
            await client.disconnect()
            logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
        except:
            pass

# ===================================================================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ===================================================================
if __name__ == '__main__':
    
    check_and_update_run_counter()
    try:
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        if e.code == 42:
            logger.critical("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—É—Å–∫–æ–≤")
        raise
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        sys.exit(1)